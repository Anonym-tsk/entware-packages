--- a/src/cfgparse.c
+++ b/src/cfgparse.c
@@ -548,6 +548,7 @@ int cfg_parse_global(const char *file, i
 	}
 	else if (!strcmp(args[0], "ca-base")) {
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (global.ca_base != NULL) {
 			Alert("parsing [%s:%d] : '%s' already specified. Continuing.\n", file, linenum, args[0]);
 			err_code |= ERR_ALERT;
@@ -564,9 +565,11 @@ int cfg_parse_global(const char *file, i
 		err_code |= ERR_ALERT | ERR_FATAL;
 		goto out;
 #endif
+#endif
 	}
 	else if (!strcmp(args[0], "crt-base")) {
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (global.crt_base != NULL) {
 			Alert("parsing [%s:%d] : '%s' already specified. Continuing.\n", file, linenum, args[0]);
 			err_code |= ERR_ALERT;
@@ -583,6 +586,7 @@ int cfg_parse_global(const char *file, i
 		err_code |= ERR_ALERT | ERR_FATAL;
 		goto out;
 #endif
+#endif
 	}
 	else if (!strcmp(args[0], "daemon")) {
 		global.mode |= MODE_DAEMON;
@@ -643,6 +647,7 @@ int cfg_parse_global(const char *file, i
 		global.tune.chksize = atol(args[1]);
 	}
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	else if (!strcmp(args[0], "tune.ssl.force-private-cache")) {
 		global.tune.sslprivatecache = 1;
 	}
@@ -696,6 +701,7 @@ int cfg_parse_global(const char *file, i
 		}
 	}
 #endif
+#endif
 	else if (!strcmp(args[0], "tune.bufsize")) {
 		if (*(args[1]) == 0) {
 			Alert("parsing [%s:%d] : '%s' expects an integer argument.\n", file, linenum, args[0]);
@@ -991,6 +997,7 @@ int cfg_parse_global(const char *file, i
 	}
 	else if (!strcmp(args[0], "maxsslconn")) {
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (*(args[1]) == 0) {
 			Alert("parsing [%s:%d] : '%s' expects an integer argument.\n", file, linenum, args[0]);
 			err_code |= ERR_ALERT | ERR_FATAL;
@@ -1002,9 +1009,11 @@ int cfg_parse_global(const char *file, i
 		err_code |= ERR_ALERT | ERR_FATAL;
 		goto out;
 #endif
+#endif
 	}
 	else if (!strcmp(args[0], "ssl-default-bind-ciphers")) {
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (*(args[1]) == 0) {
 			Alert("parsing [%s:%d] : '%s' expects a cipher suite as an argument.\n", file, linenum, args[0]);
 			err_code |= ERR_ALERT | ERR_FATAL;
@@ -1017,9 +1026,11 @@ int cfg_parse_global(const char *file, i
 		err_code |= ERR_ALERT | ERR_FATAL;
 		goto out;
 #endif
+#endif
 	}
 	else if (!strcmp(args[0], "ssl-default-server-ciphers")) {
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (*(args[1]) == 0) {
 			Alert("parsing [%s:%d] : '%s' expects a cipher suite as an argument.\n", file, linenum, args[0]);
 			err_code |= ERR_ALERT | ERR_FATAL;
@@ -1032,6 +1043,7 @@ int cfg_parse_global(const char *file, i
 		err_code |= ERR_ALERT | ERR_FATAL;
 		goto out;
 #endif
+#endif
 	}
 	else if (!strcmp(args[0], "ssl-server-verify")) {
 		if (*(args[1]) == 0) {
@@ -4419,11 +4431,13 @@ stats_error_parsing:
 					cur_arg++;
 				}
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 				else if (strcmp(args[cur_arg], "ssl") == 0) {
 					curproxy->options |= PR_O_TCPCHK_SSL;
 					tcpcheck->conn_opts |= TCPCHK_OPT_SSL;
 					cur_arg++;
 				}
+#endif
 #endif /* USE_OPENSSL */
 				else {
 #ifdef USE_OPENSSL
@@ -6809,8 +6823,10 @@ out_uri_auth_compat:
 			}
 
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 			if (newsrv->use_ssl || newsrv->check.use_ssl)
 				cfgerr += ssl_sock_prepare_srv_ctx(newsrv, curproxy);
+#endif
 #endif /* USE_OPENSSL */
 
 			/* set the check type on the server */
@@ -7181,6 +7197,7 @@ out_uri_auth_compat:
 		unsigned int next_id;
 
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		/* Configure SSL for each bind line.
 		 * Note: if configuration fails at some point, the ->ctx member
 		 * remains NULL so that listeners can later detach.
@@ -7215,6 +7232,7 @@ out_uri_auth_compat:
 			/* initialize all certificate contexts */
 			cfgerr += ssl_sock_prepare_all_ctx(bind_conf, curproxy);
 		}
+#endif
 #endif /* USE_OPENSSL */
 
 		/* adjust this proxy's listeners */
@@ -7291,11 +7309,13 @@ out_uri_auth_compat:
 			if (bind_conf->is_ssl)
 				continue;
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 			ssl_sock_free_all_ctx(bind_conf);
 			free(bind_conf->ca_file);
 			free(bind_conf->ciphers);
 			free(bind_conf->ecdhe);
 			free(bind_conf->crl_file);
+#endif
 #endif /* USE_OPENSSL */
 		}
 
--- a/src/connection.c
+++ b/src/connection.c
@@ -70,10 +70,12 @@ void conn_fd_handler(int fd)
 			if (!conn_si_send_proxy(conn, CO_FL_SEND_PROXY))
 				goto leave;
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (conn->flags & CO_FL_SSL_WAIT_HS)
 			if (!ssl_sock_handshake(conn, CO_FL_SSL_WAIT_HS))
 				goto leave;
 #endif
+#endif
 	}
 
 	/* Once we're purely in the data phase, we disable handshake polling */
@@ -598,6 +600,7 @@ int make_proxy_line_v1(char *buf, int bu
 }
 
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int make_tlv(char *dest, int dest_len, char type, uint16_t length, char *value)
 {
 	struct tlv *tlv;
@@ -614,6 +617,7 @@ static int make_tlv(char *dest, int dest
 	return length + sizeof(*tlv);
 }
 #endif
+#endif
 
 int make_proxy_line_v2(char *buf, int buf_len, struct server *srv, struct connection *remote)
 {
@@ -624,12 +628,14 @@ int make_proxy_line_v2(char *buf, int bu
 	struct sockaddr_storage *src = &null_addr;
 	struct sockaddr_storage *dst = &null_addr;
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	int tlv_len = 0;
 	char *value = NULL;
 	struct tlv_ssl *tlv;
 	int ssl_tlv_len = 0;
 	struct chunk *cn_trash;
 #endif
+#endif
 
 	if (buf_len < PP2_HEADER_LEN)
 		return 0;
@@ -670,6 +676,7 @@ int make_proxy_line_v2(char *buf, int bu
 	}
 
 #ifdef USE_OPENSSL
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	if (srv->pp_opts & SRV_PP_V2_SSL) {
 		if ((buf_len - ret) < sizeof(struct tlv_ssl))
 			return 0;
@@ -703,6 +710,7 @@ int make_proxy_line_v2(char *buf, int bu
 		ret += ssl_tlv_len;
 	}
 #endif
+#endif
 
 	hdr->len = htons((uint16_t)(ret - PP2_HEADER_LEN));
 
--- a/src/shctx.c
+++ b/src/shctx.c
@@ -385,6 +385,7 @@ static int shsess_store(unsigned char *s
 /* SSL context callbacks */
 
 /* SSL callback used on new session creation */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int shctx_new_cb(SSL *ssl, SSL_SESSION *sess)
 {
 	unsigned char encsess[sizeof(struct shsess_packet)+SHSESS_MAX_DATA_LEN];
@@ -540,6 +541,7 @@ void shctx_remove_cb(SSL_CTX *ctx, SSL_S
 	/* unlock cache */
 	shared_context_unlock();
 }
+#endif
 
 /* Allocate shared memory context.
  * <size> is maximum cached sessions.
@@ -638,6 +640,7 @@ int shared_context_init(int size, int sh
 /* Set session cache mode to server and disable openssl internal cache.
  * Set shared cache callbacks on an ssl context.
  * Shared context MUST be firstly initialized */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 void shared_context_set_cache(SSL_CTX *ctx)
 {
 	SSL_CTX_set_session_id_context(ctx, (const unsigned char *)SHCTX_APPNAME, strlen(SHCTX_APPNAME));
@@ -656,3 +659,4 @@ void shared_context_set_cache(SSL_CTX *c
 	SSL_CTX_sess_set_get_cb(ctx, shctx_get_cb);
 	SSL_CTX_sess_set_remove_cb(ctx, shctx_remove_cb);
 }
+#endif
--- a/src/ssl_sock.c
+++ b/src/ssl_sock.c
@@ -41,7 +41,6 @@
 #include <openssl/ssl.h>
 #include <openssl/x509.h>
 #include <openssl/x509v3.h>
-#include <openssl/x509.h>
 #include <openssl/err.h>
 #include <openssl/rand.h>
 #ifdef SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
@@ -111,9 +110,11 @@ int totalsslconns = 0;
 
 #ifndef OPENSSL_NO_DH
 static int ssl_dh_ptr_index = -1;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static DH *local_dh_1024 = NULL;
 static DH *local_dh_2048 = NULL;
 static DH *local_dh_4096 = NULL;
+#endif
 #endif /* OPENSSL_NO_DH */
 
 #ifdef SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
@@ -284,17 +285,21 @@ static int ssl_sock_load_ocsp_response(s
 	}
 
 	if (cid) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		if (OCSP_id_cmp(sr->certId, cid)) {
 			memprintf(err, "OCSP single response: Certificate ID does not match certificate and issuer");
 			goto out;
 		}
+#endif
 	}
 
 	if (!ocsp) {
 		unsigned char key[OCSP_MAX_CERTID_ASN1_LENGTH];
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		unsigned char *p;
 
 		rc = i2d_OCSP_CERTID(sr->certId, NULL);
+#endif
 		if (!rc) {
 			memprintf(err, "OCSP single response: Unable to encode Certificate ID");
 			goto out;
@@ -307,7 +312,9 @@ static int ssl_sock_load_ocsp_response(s
 
 		p = key;
 		memset(key, 0, OCSP_MAX_CERTID_ASN1_LENGTH);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		i2d_OCSP_CERTID(sr->certId, &p);
+#endif
 		ocsp = (struct certificate_ocsp *)ebmb_lookup(&cert_ocsp_tree, key, OCSP_MAX_CERTID_ASN1_LENGTH);
 		if (!ocsp) {
 			memprintf(err, "OCSP single response: Certificate ID does not match any certificate or issuer");
@@ -352,6 +359,7 @@ int ssl_sock_update_ocsp_response(struct
  *
  * Returns 0 on success, 1 in error case.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_load_ocsp_response_from_file(const char *ocsp_path, struct certificate_ocsp *ocsp, OCSP_CERTID *cid, char **err)
 {
 	int fd = -1;
@@ -390,6 +398,7 @@ end:
 
 	return ret;
 }
+#endif
 
 /*
  * Callback used to set OCSP status extension content in server hello.
@@ -431,6 +440,7 @@ int ssl_sock_ocsp_stapling_cbk(SSL *ssl,
  * Returns 1 if no ".ocsp" file found, 0 if OCSP status extension is
  * succesfully enabled, or -1 in other error case.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_load_ocsp(SSL_CTX *ctx, const char *cert_path)
 {
 
@@ -547,6 +557,7 @@ out:
 
 	return ret;
 }
+#endif
 
 #endif
 
@@ -676,6 +687,7 @@ void ssl_sock_msgcbk(int write_p, int ve
 /* This callback is used so that the server advertises the list of
  * negociable protocols for NPN.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_advertise_npn_protos(SSL *s, const unsigned char **data,
                                          unsigned int *len, void *arg)
 {
@@ -686,11 +698,13 @@ static int ssl_sock_advertise_npn_protos
 	return SSL_TLSEXT_ERR_OK;
 }
 #endif
+#endif
 
 #ifdef TLSEXT_TYPE_application_layer_protocol_negotiation
 /* This callback is used so that the server advertises the list of
  * negociable protocols for ALPN.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_advertise_alpn_protos(SSL *s, const unsigned char **out,
                                           unsigned char *outlen,
                                           const unsigned char *server,
@@ -705,12 +719,14 @@ static int ssl_sock_advertise_alpn_proto
 	return SSL_TLSEXT_ERR_OK;
 }
 #endif
+#endif
 
 #ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME
 /* Sets the SSL ctx of <ssl> to match the advertised server name. Returns a
  * warning when no match is found, which implies the default (first) cert
  * will keep being used.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_switchctx_cbk(SSL *ssl, int *al, struct bind_conf *s)
 {
 	const char *servername;
@@ -759,9 +775,11 @@ static int ssl_sock_switchctx_cbk(SSL *s
 	SSL_set_SSL_CTX(ssl, container_of(node, struct sni_ctx, name)->ctx);
 	return SSL_TLSEXT_ERR_OK;
 }
+#endif
 #endif /* SSL_CTRL_SET_TLSEXT_HOSTNAME */
 
 #ifndef OPENSSL_NO_DH
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 
 static DH * ssl_get_dh_1024(void)
 {
@@ -989,7 +1007,9 @@ end:
 	return ret;
 }
 #endif
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_add_cert_sni(SSL_CTX *ctx, struct bind_conf *s, char *name, int order)
 {
 	struct sni_ctx *sc;
@@ -1023,10 +1043,12 @@ static int ssl_sock_add_cert_sni(SSL_CTX
 	}
 	return order;
 }
+#endif
 
 /* Loads a certificate key and CA chain from a file. Returns 0 on error, -1 if
  * an early error happens and the caller must call SSL_CTX_free() by itelf.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_load_cert_chain_file(SSL_CTX *ctx, const char *file, struct bind_conf *s, char **sni_filter, int fcount)
 {
 	BIO *in;
@@ -1114,7 +1136,9 @@ end:
 
 	return ret;
 }
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_load_cert_file(const char *path, struct bind_conf *bind_conf, struct proxy *curproxy, char **sni_filter, int fcount, char **err)
 {
 	int ret;
@@ -1190,7 +1214,9 @@ static int ssl_sock_load_cert_file(const
 
 	return 0;
 }
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int ssl_sock_load_cert(char *path, struct bind_conf *bind_conf, struct proxy *curproxy, char **err)
 {
 	struct dirent **de_list;
@@ -1240,12 +1266,14 @@ int ssl_sock_load_cert(char *path, struc
 	closedir(dir);
 	return cfgerr;
 }
+#endif
 
 /* Make sure openssl opens /dev/urandom before the chroot. The work is only
  * done once. Zero is returned if the operation fails. No error is returned
  * if the random is said as not implemented, because we expect that openssl
  * will use another method once needed.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_initialize_random()
 {
 	unsigned char random;
@@ -1256,7 +1284,9 @@ static int ssl_initialize_random()
 
 	return random_initialized;
 }
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int ssl_sock_load_cert_list_file(char *file, struct bind_conf *bind_conf, struct proxy *curproxy, char **err)
 {
 	char thisline[LINESIZE];
@@ -1328,6 +1358,7 @@ int ssl_sock_load_cert_list_file(char *f
 	fclose(f);
 	return cfgerr;
 }
+#endif
 
 #ifndef SSL_OP_CIPHER_SERVER_PREFERENCE                 /* needs OpenSSL >= 0.9.7 */
 #define SSL_OP_CIPHER_SERVER_PREFERENCE 0
@@ -1362,6 +1393,7 @@ int ssl_sock_load_cert_list_file(char *f
 #define SSL_MODE_RELEASE_BUFFERS 0
 #endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int ssl_sock_prepare_ctx(struct bind_conf *bind_conf, SSL_CTX *ctx, struct proxy *curproxy)
 {
 	int cfgerr = 0;
@@ -1566,7 +1598,9 @@ int ssl_sock_prepare_ctx(struct bind_con
 
 	return cfgerr;
 }
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_srv_hostcheck(const char *pattern, const char *hostname)
 {
 	const char *pattern_wildcard, *pattern_left_label_end, *hostname_left_label_end;
@@ -1622,7 +1656,9 @@ static int ssl_sock_srv_hostcheck(const
 
 	return 1;
 }
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int ssl_sock_srv_verifycbk(int ok, X509_STORE_CTX *ctx)
 {
 	SSL *ssl;
@@ -1689,8 +1725,10 @@ static int ssl_sock_srv_verifycbk(int ok
 
 	return ok;
 }
+#endif
 
 /* prepare ssl context from servers options. Returns an error count */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int ssl_sock_prepare_srv_ctx(struct server *srv, struct proxy *curproxy)
 {
 	int cfgerr = 0;
@@ -1844,11 +1882,13 @@ int ssl_sock_prepare_srv_ctx(struct serv
 
 	return cfgerr;
 }
+#endif
 
 /* Walks down the two trees in bind_conf and prepares all certs. The pointer may
  * be NULL, in which case nothing is done. Returns the number of errors
  * encountered.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int ssl_sock_prepare_all_ctx(struct bind_conf *bind_conf, struct proxy *px)
 {
 	struct ebmb_node *node;
@@ -1882,6 +1922,7 @@ int ssl_sock_prepare_all_ctx(struct bind
 	}
 	return err;
 }
+#endif
 
 /* Walks down the two trees in bind_conf and frees all the certs. The pointer may
  * be NULL, in which case nothing is done. The default_ctx is nullified too.
@@ -2101,6 +2142,7 @@ int ssl_sock_handshake(struct connection
 				fd_cant_recv(conn->t.sock.fd);
 				return 0;
 			}
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 			else if (ret == SSL_ERROR_SYSCALL) {
 				/* if errno is null, then connection was successfully established */
 				if (!errno && conn->flags & CO_FL_WAIT_L4_CONN)
@@ -2129,6 +2171,7 @@ int ssl_sock_handshake(struct connection
 				}
 				goto out_error;
 			}
+#endif
 			else {
 				/* Fail on all other handshake errors */
 				/* Note: OpenSSL may leave unread bytes in the socket's
@@ -2173,6 +2216,7 @@ int ssl_sock_handshake(struct connection
 			if (!errno && conn->flags & CO_FL_WAIT_L4_CONN)
 				conn->flags &= ~CO_FL_WAIT_L4_CONN;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 			if (!((SSL *)conn->xprt_ctx)->packet_length) {
 				if (!errno) {
 					if (conn->xprt_st & SSL_SOCK_RECV_HEARTBEAT)
@@ -2187,6 +2231,7 @@ int ssl_sock_handshake(struct connection
 						conn->err_code = CO_ER_SSL_ABORT;
 				}
 			}
+#endif
 			else {
 				if (conn->xprt_st & SSL_SOCK_RECV_HEARTBEAT)
 					conn->err_code = CO_ER_SSL_HANDSHAKE_HB;
@@ -2497,6 +2542,7 @@ const char *ssl_sock_get_proto_version(s
  * Returns 1 if serial is found and copied, 0 if no serial found and
  * -1 if output is not large enough.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int
 ssl_sock_get_serial(X509 *crt, struct chunk *out)
 {
@@ -2513,11 +2559,13 @@ ssl_sock_get_serial(X509 *crt, struct ch
 	out->len = serial->length;
 	return 1;
 }
+#endif
 
 /* Extract a cert to der, and copy it to a chunk.
  * Returns 1 if cert is found and copied, 0 on der convertion failure and
  * -1 if output is not large enough.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int
 ssl_sock_crt2der(X509 *crt, struct chunk *out)
 {
@@ -2535,12 +2583,14 @@ ssl_sock_crt2der(X509 *crt, struct chunk
 	out->len = len;
 	return 1;
 }
+#endif
 
 
 /* Copy Date in ASN1_UTCTIME format in struct chunk out.
  * Returns 1 if serial is found and copied, 0 if no valid time found
  * and -1 if output is not large enough.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int
 ssl_sock_get_time(ASN1_TIME *tm, struct chunk *out)
 {
@@ -2575,10 +2625,12 @@ ssl_sock_get_time(ASN1_TIME *tm, struct
 
 	return 0;
 }
+#endif
 
 /* Extract an entry from a X509_NAME and copy its value to an output chunk.
  * Returns 1 if entry found, 0 if entry not found, or -1 if output not large enough.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int
 ssl_sock_get_dn_entry(X509_NAME *a, const struct chunk *entry, int pos, struct chunk *out)
 {
@@ -3210,11 +3262,13 @@ smp_fetch_ssl_x_version(struct proxy *px
 
 	return 1;
 }
+#endif
 
 /* string, returns the certificate's signature algorithm.
  * The 5th keyword char is used to know if SSL_get_certificate or SSL_get_peer_certificate
  * should be use.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int
 smp_fetch_ssl_x_sig_alg(struct proxy *px, struct session *l4, void *l7, unsigned int opt,
                         const struct arg *args, struct sample *smp, const char *kw)
@@ -3262,11 +3316,13 @@ smp_fetch_ssl_x_sig_alg(struct proxy *px
 
 	return 1;
 }
+#endif
 
 /* string, returns the certificate's key algorithm.
  * The 5th keyword char is used to know if SSL_get_certificate or SSL_get_peer_certificate
  * should be use.
  */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static int
 smp_fetch_ssl_x_key_alg(struct proxy *px, struct session *l4, void *l7, unsigned int opt,
                         const struct arg *args, struct sample *smp, const char *kw)
@@ -3313,6 +3369,7 @@ smp_fetch_ssl_x_key_alg(struct proxy *px
 
 	return 1;
 }
+#endif
 
 /* boolean, returns true if front conn. transport layer is SSL.
  * This function is also usable on backend conn if the fetch keyword 5th
@@ -3769,6 +3826,7 @@ static int bind_parse_ciphers(char **arg
 	return 0;
 }
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 /* parse the "crt" bind keyword */
 static int bind_parse_crt(char **args, int cur_arg, struct proxy *px, struct bind_conf *conf, char **err)
 {
@@ -3796,6 +3854,7 @@ static int bind_parse_crt(char **args, i
 
 	return 0;
 }
+#endif
 
 /* parse the "crt-list" bind keyword */
 static int bind_parse_crt_list(char **args, int cur_arg, struct proxy *px, struct bind_conf *conf, char **err)
@@ -3805,10 +3864,12 @@ static int bind_parse_crt_list(char **ar
 		return ERR_ALERT | ERR_FATAL;
 	}
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	if (ssl_sock_load_cert_list_file(args[cur_arg + 1], conf, px, err) > 0) {
 		memprintf(err, "'%s' : %s", args[cur_arg], *err);
 		return ERR_ALERT | ERR_FATAL;
 	}
+#endif
 
 	return 0;
 }
@@ -4458,8 +4519,11 @@ static struct sample_fetch_kw_list sampl
 	{ "ssl_bc_session_id",      smp_fetch_ssl_fc_session_id,  0,                   NULL,    SMP_T_BIN,  SMP_USE_L5SRV },
 	{ "ssl_c_ca_err",           smp_fetch_ssl_c_ca_err,       0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
 	{ "ssl_c_ca_err_depth",     smp_fetch_ssl_c_ca_err_depth, 0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	{ "ssl_c_der",              smp_fetch_ssl_x_der,          0,                   NULL,    SMP_T_BIN,  SMP_USE_L5CLI },
+#endif
 	{ "ssl_c_err",              smp_fetch_ssl_c_err,          0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	{ "ssl_c_i_dn",             smp_fetch_ssl_x_i_dn,         ARG2(0,STR,SINT),    NULL,    SMP_T_STR,  SMP_USE_L5CLI },
 	{ "ssl_c_key_alg",          smp_fetch_ssl_x_key_alg,      0,                   NULL,    SMP_T_STR,  SMP_USE_L5CLI },
 	{ "ssl_c_notafter",         smp_fetch_ssl_x_notafter,     0,                   NULL,    SMP_T_STR,  SMP_USE_L5CLI },
@@ -4469,7 +4533,9 @@ static struct sample_fetch_kw_list sampl
 	{ "ssl_c_serial",           smp_fetch_ssl_x_serial,       0,                   NULL,    SMP_T_BIN,  SMP_USE_L5CLI },
 	{ "ssl_c_sha1",             smp_fetch_ssl_x_sha1,         0,                   NULL,    SMP_T_BIN,  SMP_USE_L5CLI },
 	{ "ssl_c_used",             smp_fetch_ssl_c_used,         0,                   NULL,    SMP_T_BOOL, SMP_USE_L5CLI },
+#endif
 	{ "ssl_c_verify",           smp_fetch_ssl_c_verify,       0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	{ "ssl_c_version",          smp_fetch_ssl_x_version,      0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
 	{ "ssl_f_der",              smp_fetch_ssl_x_der,          0,                   NULL,    SMP_T_BIN,  SMP_USE_L5CLI },
 	{ "ssl_f_i_dn",             smp_fetch_ssl_x_i_dn,         ARG2(0,STR,SINT),    NULL,    SMP_T_STR,  SMP_USE_L5CLI },
@@ -4481,10 +4547,13 @@ static struct sample_fetch_kw_list sampl
 	{ "ssl_f_serial",           smp_fetch_ssl_x_serial,       0,                   NULL,    SMP_T_BIN,  SMP_USE_L5CLI },
 	{ "ssl_f_sha1",             smp_fetch_ssl_x_sha1,         0,                   NULL,    SMP_T_BIN,  SMP_USE_L5CLI },
 	{ "ssl_f_version",          smp_fetch_ssl_x_version,      0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
+#endif
 	{ "ssl_fc",                 smp_fetch_ssl_fc,             0,                   NULL,    SMP_T_BOOL, SMP_USE_L5CLI },
 	{ "ssl_fc_alg_keysize",     smp_fetch_ssl_fc_alg_keysize, 0,                   NULL,    SMP_T_UINT, SMP_USE_L5CLI },
 	{ "ssl_fc_cipher",          smp_fetch_ssl_fc_cipher,      0,                   NULL,    SMP_T_STR,  SMP_USE_L5CLI },
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	{ "ssl_fc_has_crt",         smp_fetch_ssl_fc_has_crt,     0,                   NULL,    SMP_T_BOOL, SMP_USE_L5CLI },
+#endif
 	{ "ssl_fc_has_sni",         smp_fetch_ssl_fc_has_sni,     0,                   NULL,    SMP_T_BOOL, SMP_USE_L5CLI },
 #ifdef OPENSSL_NPN_NEGOTIATED
 	{ "ssl_fc_npn",             smp_fetch_ssl_fc_npn,         0,                   NULL,    SMP_T_STR,  SMP_USE_L5CLI },
@@ -4522,7 +4591,9 @@ static struct bind_kw_list bind_kws = {
 	{ "ca-ignore-err",         bind_parse_ignore_err,     1 }, /* set error IDs to ignore on verify depth > 0 */
 	{ "ciphers",               bind_parse_ciphers,        1 }, /* set SSL cipher suite */
 	{ "crl-file",              bind_parse_crl_file,       1 }, /* set certificat revocation list file use on client cert verify */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	{ "crt",                   bind_parse_crt,            1 }, /* load SSL certificates from this location */
+#endif
 	{ "crt-ignore-err",        bind_parse_ignore_err,     1 }, /* set error IDs to ingore on verify depth == 0 */
 	{ "crt-list",              bind_parse_crt_list,       1 }, /* load a list of crt from this location */
 	{ "ecdhe",                 bind_parse_ecdhe,          1 }, /* defines named curve for elliptic curve Diffie-Hellman */
@@ -4625,6 +4696,7 @@ static void __ssl_sock_init(void)
 __attribute__((destructor))
 static void __ssl_sock_deinit(void)
 {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 #ifndef OPENSSL_NO_DH
         if (local_dh_1024) {
                 DH_free(local_dh_1024);
@@ -4650,6 +4722,7 @@ static void __ssl_sock_deinit(void)
 #if OPENSSL_VERSION_NUMBER >= 0x00907000L
         CRYPTO_cleanup_all_ex_data();
 #endif
+#endif
 }
 
 
